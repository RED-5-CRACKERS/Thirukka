#!/usr/bin/python3
#===========================================================================================================================(Madhava)
#===========================================================================================================================(R-5-C)
import sys
import time
import random
import itertools
from Uri import *
from re import ASCII
from re import search
from os import system
from threading import Thread
from threading import active_count
from os import get_terminal_size as t_size

try:
    from requests import get
except:
    print("""[!] Module requests is not installed, 
    Run 'pip install requests' or 'pip3 install requests'""")

RANLIST=[
        "Use '?' to print help banner",
        "Search and download from online '3' /<searchquery>, :<s.no>", 
        "'ls' to list all files and directorys in cwd",
        "'du' to see disk usage",
        "Search and download from online '3' /<searchquery>, :<s.no>",
        "'clear' to clear console",
        "https://github.com/Madhava-mng/li5tgen Advanced wordlist gen",
        "'pwd' to print current working directory"
        ]
def Help_banner():
    print(u"""\u001b[32;1m-----------------------------Help-------------------------------
Def\u001b[0m: \u001b[2;1mThirukka is a wordlist generator for password attacks,
url broutforceing, hash cracking, etc...\u001b[0m\u001b[32;1m
+--------------------------------------------------------------+
|    Title     | Command |          Discription                |
|--------------+---------+-------------------------------------|
|              |    1    | User Intractive mode.               |
|              |    2    | Charectors all passiblities         |
| Tool command |    3    | Search and download from online     |
|              |    4    | Customizer eg:prefix <word> suffix  |
|              |  back   | Go back                             |
|              |    ?    | This banner                         |
|--------------+---------+-------------------------------------|
|              |   ls    | List directory contents             |
|System command|   pwd   | Print current working directory     |
|              |   du    | Disk usage                          |
|              |  clear  | Clear Terminal                      |
|--------------+---------+-------------------------------------|
| Exit command |  exit   | Quit                                |
+--------------------------------------------------------------+
| (\u001b[35;1m3\u001b[32;1m) \u001b[4mOnline\u001b[0m\u001b[32;1m:                                                  |
|                                                              |
| \u001b[32;4;1mThirukka\u001b[0m> 3\u001b[32;1m                                                  |
| \u001b[35;1msearch ==> \u001b[32;1m/\u001b[0m<pattern>  \u001b[32;1m                                      |
| \u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m3/Online\u001b[0m)> /password\u001b[32;1m                                |
| \u001b[35;1mDownload ==> \u001b[32;1m:\u001b[0m<s.no> \u001b[32;1m                                        |
| \u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m3/Online\u001b[0m)> :146\u001b[32;1m                                     |
|                                                              |
| (\u001b[35;1m4\u001b[32;1m) \u001b[4mCustomizer\u001b[0m\u001b[32;1m:                                              |
|                                                              |
| \u001b[32;4;1mThirukka\u001b[0m> 4\u001b[32;1m                                                  |
| \u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Prefix\u001b[0m): https://www.\u001b[32;1m                             |
| \u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Suffix\u001b[0m): .mysite.com\u001b[32;1m                              |
| \u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Inputfile\u001b[0m): words.txt\u001b[32;1m                             |
| \u001b[33;1mDo you want to add some more info ? \u001b[0m:\u001b[32;1m                        |
| \u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Outputfilename:wordlist.txt\u001b[0m):\u001b[32;1m                     |
| [\u001b[31;1m*\u001b[32;1m] Process done.                                            |
| \u001b[0m\u001b[31;1mFilename\u001b[0m: wordlist.txt\u001b[32;1m                                       |
| \u001b[32;4;1mThirukka\u001b[0m> q\u001b[32;1m                                                  |
| \u001b[31;1mroot@localhost\u001b[0m:\u001b[34;1m~\u001b[0m# cat wordlist.txt\u001b[32;1m                           |
| \u001b[0mhttps://www.contacts.mysite.com\u001b[32;1m                              |
| \u001b[0mhttps://www.topics.mysite.com\u001b[32;1m                                |
| \u001b[0mhttps://www.support.mysite.com\u001b[32;1m                               |
| \u001b[31;1mroot@localhost\u001b[0m:\u001b[34;1m~\u001b[0m#\u001b[32;1m                                            |
|                                                              |
+--------------------------------------------------------------+\u001b[0m
\u001b[36mIssue\u001b[0m:\u001b[2m https://github.com/RED-5-CRACKERS/Thirukka/issues\u001b[0m
\u001b[36mPulls\u001b[0m:\u001b[2m https://github.com/RED-5-CRACKERS/Thirukka/pulls\u001b[0m
\u001b[36mSite\u001b[0m:\u001b[2m https://red5cracker.wordpress.com\u001b[0m
\u001b[32;1m---------------------------ThankYou-----------------------------\u001b[0m""")
def T():
    time.sleep(0.01)
clean = '\n'*(t_size()[1])
print(f"{clean}\u001b[32;1m");time.sleep(0.4)
print("────────────────────────────────────────────────────────────────");T()
print("───────────╔════╗╔╗─╔╗╔══╗╔═══╗╔╗─╔╗╔╗╔═╗╔╗╔═╗╔═══╗─────────────");T()
print("───────────║╔╗╔╗║║║─║║╚╣─╝║╔═╗║║║─║║║║║╔╝║║║╔╝║╔═╗║─────────────");T()
print("───────────╚╝║║╚╝║╚═╝║─║║─║╚═╝║║║─║║║╚╝╝─║╚╝╝─║║─║║─────────────");T()
print("─────────────║║──║╔═╗║─║║─║╔╗╔╝║║─║║║╔╗║─║╔╗║─║╚═╝║─────────────");T()
print("─────────────║║──║║─║║╔╣─╗║║║╚╗║╚═╝║║║║╚╗║║║╚╗║╔═╗║─────────────");T()
print("─────────────╚╝──╚╝─╚╝╚══╝╚╝╚═╝╚═══╝╚╝╚═╝╚╝╚═╝╚╝─╚╝─────────────");T()
print("────────────────────────────────────────────────────────────────")
T();print("\n");T();print("\n");T()
print("                 [ @\u001b[31;1mRed5crackers \u001b[0m(\u001b[33;1mv2.0.1\u001b[0m)\u001b[32;1m ]");T()
print("                 [ \u001b[34;1mAuthor\u001b[32m: Madhava\u001b[32;1m        ]");T()
print("\n");T();print("\n");T()
def opt():
    print("\u001b[0m\u001b[36mTips\u001b[0m: \u001b[2m{}\u001b[0m\u001b[32;1m".format(random.choice(RANLIST)));T()
    print("----------------------------------------------------------------");T()
    print("\u001b[32;1m [\u001b[31;1m1\u001b[32;1m]. Intractive.       \u001b[32;1m [\u001b[31;1m2\u001b[32;1m]. Iteration.");T()
    print("\u001b[32;1m [\u001b[31;1m3\u001b[32;1m]. Online (best)     \u001b[32;1m [\u001b[31;1m4\u001b[32;1m]. Customizer. \u001b[0m\u001b[36mprefix\u001b[33m\u001b[2m<Anyword>\u001b[0m\u001b[36msuffix");T()
    print("\u001b[32;1m [\u001b[31;1m?\u001b[32;1m]. Help              \u001b[32;1m [\u001b[31;1mQ\u001b[32;1m]. Quit");T()
    print("----------------------------------------------------------------");T()
    try:
        while True:
            option=input(u"\u001b[32;4;1mThirukka\u001b[0m> ").strip()
            try:
                if option == "1":
                    try:
                        print(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m1/...\u001b[36;1m')
                        ques()
                    except:
                        pass
                elif option == "2":
                    try:
                        upass()
                    except:
                        pass
                elif option == "3":
                    try:
                        Online()
                    except:
                        pass
                elif option == "4":
                    try:
                        customize()
                    except:
                        pass
                elif option in ("quit", "exit"):
                    exit()
                elif option == "ls":
                    print("\u001b[32;1m----------------------------------------------------------------\u001b[0m")
                    system("ls -Alh --color")
                    print("\u001b[32;1m----------------------------------------------------------------\u001b[0m")
                elif option == "du":
                    print("\u001b[32;1m----------------------------------------------------------------\u001b[0m")
                    system("du -sh *")
                    print("\u001b[32;1m----------------------------------------------------------------\u001b[0m")
                elif option == "pwd":
                    system("pwd")
                elif option == "clear":
                    system("clear")
                elif option in ("?","help","h"):
                    Help_banner()
                elif option == "":
                    pass
                else:
                    print("\u001b[32;1m[\u001b[31;1m!\u001b[32;1m] Ooops!, '\u001b[31;1m{}\u001b[32;1m' Not Found. Try '\u001b[36;1m?\u001b[32m'  ".format(option))
            except:
                print(sys.exe_info())
    except:
        pass


def ques():
    b=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""]
    dob=["","","","","","","","","","","","","","","",""]
    s=["?","!","@","#","$","_","&","-","+","*","∆","×","|","~","•","°","="]
    c=42
    count=0
    def DOB(_date_):
        while True:
            Pass=True
            dob[_date_]=input(u"\u001b[36;1mDDMMYYYY\u001b[0m: ").strip()
            if dob[_date_]=="":
                return dob[_date_]
            else:
                if len(dob[_date_])==8:
                    if dob[_date_].isdigit():
                        if int(dob[_date_][:2])>31:
                            print("\u001b[0m[\u001b[31;1m!\u001b[0m] \u001b[31;1mInvalied Date\u001b[0m: \u001b[33;1m "+dob[_date_][:2]+"\u001b[0m\u001b[2;1m/MM/YYYY\u001b[0m")
                        elif int(dob[_date_][2:4])>12:
                            print("\u001b[0m[\u001b[31;1m!\u001b[0m] \u001b[31;1mInvalied Month\u001b[0m: \u001b[0m\u001b[2;1mDD/\u001b[0m\u001b[33;1m"+dob[_date_][2:4]+"\u001b[0m\u001b[2;1m/YYYY\u001b[0m")
                        else:
                            return dob[_date_]
                    else:
                        print("\u001b[0m[\u001b[31;1m!\u001b[0m] \u001b[31;1mDob must be an Integer")
                else:
                    print("\u001b[0m[\u001b[31;1m!\u001b[0m] \u001b[31;1mDob must be 8  \u001b[33;1mEg\u001b[0m: \u001b[32;1m12082001 ")
    b[0]=input(u"\u001b[32;1mVictom's Name\u001b[0m: ")
    b[1]=input(u"\u001b[32;1mShure Name\u001b[0m: ")
    b[2]=input(u"\u001b[32;1mPet Name\u001b[0m: ")
    dob[0]=DOB(0)
    b[3]=input(u"\u001b[32;1mEnemy Name\u001b[0m: ")
    b[4]=input(u"\u001b[32;1mFeverot star\u001b[0m: ")
    b[5]=input(u"\u001b[32;1mFeverot Game\u001b[0m: ")
    b[6]=input(u"\u001b[32;1mMemerable Thing or Place\u001b[0m: ")
    b[7]=input(u"\u001b[32;1mPhone\u001b[0m: ")
    b[8]=input(u"\u001b[32;1mCity\u001b[0m: ")
    print(u"\u001b[32;1m ---  Home Info  --- \u001b[0m")
    b[9]=input(u"\u001b[32;1mFather Name\u001b[0m: ")
    dob[1]=DOB(1)
    b[10]=input(u"\u001b[32;1mFather's Feverot thing\u001b[0m: ")
    b[11]=input(u"\u001b[32;1mMother Name\u001b[0m: ")
    dob[2]=DOB(2)
    b[12]=input(u"\u001b[32;1mMother's Feverot thing\u001b[0m: ")
    b[13]=input(u"\u001b[32;1mBrother's Name\u001b[0m: ")
    dob[3]=DOB(3)
    b[14]=input(u"\u001b[32;1mSister's Name\u001b[0m: ")
    dob[4]=DOB(4)
    friend=input(u"\u001b[33;1mDo you want to bind about his/her Friend ? \u001b[0m").strip()
    if friend == "y" or friend == "yes":
        b[15]=input(u"\u001b[32;1mFriend's Name\u001b[0m: ")
        b[16]=input(u"\u001b[32;1mLast Name\u001b[0m: ")
        dob[5]=DOB(5)
        b[17]=input(u"\u001b[32;1mPet Name\u001b[0m: ")
        b[18]=input(u"\u001b[32;1mCity\u001b[0m: ")
        b[19]=input(u"\u001b[32;1mFeverot\u001b[0m: ")
        b[20]=input(u"\u001b[32;1mPhone\u001b[0m: ")
    danger=input(u"\u001b[33;1mDo you want to bind his/her Life Partner ?\u001b[0m ").strip()
    if danger == "y" or danger == "yes":
        b[21]=input(u"\u001b[32;1mName\u001b[0m: ")
        b[22]=input(u"\u001b[32;1mLast Name\u001b[0m: ")
        b[23]=input(u"\u001b[32;1mPet Name\u001b[0m: ")
        dob[6]=DOB(6)
        b[24]=input(u"\u001b[32;1mFeverot\u001b[0m: ")
    baby=input(u"\u001b[33;1mDo you want to bind about his/her Children ? \u001b[0m").strip()
    if baby == "y" or baby == "yes":
        b[25]=input(u"\u001b[32;1mName\u001b[0m: ")
        b[26]=input(u"\u001b[32;1mLast Name\u001b[0m: ")
        b[27]=input(u"\u001b[32;1mPet Name\u001b[0m: ")
        dob[7]=DOB(7)
        b[27]=input(u"\u001b[32;1mFeverot\u001b[0m: ")
    b[28]=input(u"\u001b[35;1mVectom's Most used word or name or ... \u001b[0m: ").strip()
    Freetype=input(u"\u001b[33;1mDo you want to add some more info ? \u001b[0m").strip()
    if Freetype == "y" or Freetype == "yes":
        I=1
        print(u"\u001b[32;1m   ---  Additional Info  --- \u001b[0m")
        print(u"\u001b[32;1m[\u001b[31;1m*\u001b[32;1m] After added, '\u001b[33;1m:q\u001b[32;1m' to come back")
        while True:
            a=input(u"\u001b[31;1m"+str(I)+".Additional info\u001b[0m: ").strip()
            if a != ":q":
                b.append(a)
                I+=1
            else:
                print("\u001b[32;1m <<Step back>>\u001b[0m")
                break
        for i in range(25):
            b.append("")
    upper=input(u"\u001b[33;1mDo you want to add UPPER case ? \u001b[0m").strip()
    sc=input(u"\u001b[33;1mDo you want to add Specel cherectors ? \u001b[0m").strip()
    num=input(u"\u001b[33;1mEnd with numbers ? \u001b[0m").strip()
    print(u"\u001b[32;1m[\u001b[31;1m*\u001b[32;1m] Eg: MadhavaMadhavaMadhava")
    three=input(u"\u001b[33;1mDo you want to bind trice of the info ? \u001b[0m").strip()
    print(u"\u001b[32;1m[\u001b[31;1m*\u001b[32;1m] Default 'wordlist.txt'")
    fname=input(u"File Name\u001b[0m: ").strip()
    if fname == "":
        fname="wordlist.txt"
    #Procesd=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m2/Enter_to_Generet\u001b[0m)> \u001b[36;1m')
    #CONFIG
    b[-1]=dob[0][:2]
    b[-2]=dob[0][2:4]
    b[-3]=dob[0][4:8]
    b[-4]=dob[1][:2]
    b[-5]=dob[1][2:4]
    b[-6]=dob[1][4:8]
    b[-7]=dob[2][:2]
    b[-8]=dob[2][2:4]
    b[-9]=dob[2][4:8]
    b[-10]=dob[3][:2]
    b[-11]=dob[3][2:4]
    b[-12]=dob[3][4:8]
    b[-13]=dob[4][:2]
    b[-14]=dob[4][2:4]
    b[-15]=dob[4][4:8]
    b[-16]=dob[5][:2]
    b[-17]=dob[5][2:4]
    b[-18]=dob[5][4:8]
    b[-19]=dob[6][:2]
    b[-20]=dob[6][2:4]
    b[-21]=dob[6][4:8]
    b[-22]=dob[7][:2]
    b[-23]=dob[7][2:4]
    b[-24]=dob[7][4:8]
    zc1=0
    for i in b:
        i=i.strip()
        f=open(fname,"a")
        if i != "":
            f.write(i+"\n")
            zc1+=1
            for n in b:
                n=n.strip()
                if n != "":
                    f.write(n+i+"\n")
                    zc1+=1
                    for m in b:
                        m=m.strip()
                        if three == "y" or three == "yes" or three == "Y":
                            if m != "":
                                f.write(i+n+m+"\n")
                                zc1+=1
                                if upper == "y" or upper == "yes" or upper == "Y":
                                    f.write(i+n+m.upper()+"\n")
                                    f.write(i+n.upper()+m+"\n")
                                    f.write(i.upper()+n+m+"\n")
                                    f.write(i.capitalize()+n+m+"\n")
                                    f.write(i+n.capitalize()+m+"\n")
                                    f.write(i+n+m.capitalize()+"\n")
                                    f.write(i.upper()+n.capitalize()+m+"\n")
                                    f.write(i.capitalize()+n.upper()+m+"\n")
                                    f.write(i+n.capitalize()+m.upper()+"\n")
                                    f.write(i+n.upper()+m.capitalize()+"\n")
                                    f.write(i.upper()+n.upper()+m.capitalize()+"\n")
                                    f.write(i.capitalize()+n.upper()+m.upper()+"\n")
                                    zc1+=12
                    if upper == "y" or upper == "yes" or upper == "Y":
                        f.write(n+i.upper()+"\n")
                        f.write(n.upper()+i+"\n")
                        f.write(n+i.capitalize()+"\n")
                        f.write(n.capitalize()+i+"\n")
                        f.write(n.upper()+i.capitalize()+"\n")
                        f.write(n.upper()+i.upper()+"\n")
                        f.write(n.capitalize()+i.capitalize()+"\n")
                        f.write(n.capitalize()+i.upper()+"\n")
                        zc1+=8
                    if num == "y" or num == "yes":
                        for Num in range(0,200):
                            f.write(n+i+str(Num)+"\n")
                            zc1+=1
            if upper == "y" or upper == "yes" or upper == "Y":
                f.write(i.upper()+"\n")
                f.write(i.capitalize()+"\n")
                zc1+=2
            if num == "y" or num == "yes":
                for cou in range(0,200):
                    f.write(i+str(cou)+"\n")
                    zc1+=1
            if sc == "y" or sc =="yes":
                for Sc in s:
                    for Y in b:
                        if Sc != "" and Y != "":
                            f.write(Y+Sc+"\n")
                            f.write(Sc+Y+"\n")
                            if upper == "y" or upper == "yes":
                                f.write(Sc+Y.capitalize()+"\n")
                                f.write(Y.capitalize()+Sc+"\n")
                                zc1+=2
                            zc1+=2
                sc=""
            count+=1
    f.close()
    lis=[fname,str(zc1)]
    print(u"\u001b[32;1m+------------------------------+-------------------------------+")
    print(u"| Name of the wordlist         | Total Number of Lines Added   |")
    print(u"+------------------------------+-------------------------------+")
    print(u"| \u001b[37;1m",lis[0]," "*(26-len(lis[0])),"\u001b[32;1m| \u001b[37;1m",lis[1]," "*(27-len(lis[1])),"\u001b[32;1m|")
    print(u"+------------------------------+-------------------------------+\u001b[0m")


def upass():
    try:
        zzz=[

                "-ENERATING ",
                "G-NERATING ",
                "GE-ERATING ",
                "GEN-RATING ",
                "GENE-ATING ",
                "GENER-TING ",
                "GENERA-ING ",
                "GENERAT-NG ",
                "GENERATI-G ",
                "GENERATIN- ",
                ]
        zz=itertools.cycle(zzz)
        line=0
        chars=""
        min_=""
        max_=""
        while chars == "" or len(chars)!=len(set(chars)):
            chars=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m2/charectors\u001b[0m): \u001b[0m').strip()
            if len(chars)!=len(set(chars)):
                print("\u001b[32;1m[\u001b[31;1m!\u001b[32;1m] Similar charector present in \u001b[0m'{}'.\u001b[0m".format(chars))
        def Min(min_=""):    
            while min_ == "":
                min_=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m2/\u001b[31;4;1mMIN\u001b[0m\u001b[31;1mimum_length\u001b[0m): \u001b[0m').strip()
                if min_.isdigit():
                    return int(min_)
                else:
                    min_=""
        def Max(max_=""):
            while max_ == "":
                max_=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m2/\u001b[31;4;1mMAX\u001b[0m\u001b[31;1mimum_length\u001b[0m): \u001b[0m').strip()
                if max_.isdigit():
                    return int(max_)
                else:
                    max_=""
        while True:
            min_=Min()
            max_=Max()
            if min_ > max_:
                print(u'\u001b[32;1m[\u001b[31;1m!\u001b[32;1m] MINIMUM VALUE MUTS BE SMALLER THEN MAXIMUM VALUE')
            else:
                break
        up=input(u"\u001b[33;1mUppercase comitement ?\u001b[0m:  ").strip()
        f=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m2/filename:wordlist.txt\u001b[0m): \u001b[36;1m').strip()
        if f == '':
            f="wordlist.txt"
        ff=f
        f = open(f, 'a')
        fc=0
        for n in range(min_,max_ + 1):
            for i in itertools.product(chars, repeat=n):
                line+=1
                num=line
                a = ''.join(i)
                if up == 'y' or up == 'Y' or up == "yes" or up == "Yes":
                    c=a.upper()
                    e=a.capitalize()
                    f.write("%s\n" % e)
                    f.write("%s\n" % c)
                d=a
                f.write("%s\n" % d)
                if fc == 30000:
                    lis=["↓","↑","↑","↑","↓","↑"]
                    ran=random.choice(lis)
                    print(u"\u001b[36;1m ",ran,"\u001b[32;1m",next(zz),"\u001b[31;1m(\u001b[36;1m",len(a),"\u001b[31;1m) [\u001b[36;1m{}\u001b[31;1m]".format(a)+"\r",end="")
                    fc=0
                else:
                    fc+=1
                sys.stdout.flush()
        f.close()
        if up == "y" or up == "Y" or up == "yes":
            line*=3
        lis=[ff,str(line)]
        print(u'\u001b[32;1m[\u001b[31;1m*\u001b[32;1m] Successfully Completed                          ')
        print(u"\u001b[32;1m+-----------------------+-----------------------------+")
        print(u"| Name of the wordlist  | Total Number of Lines Added |")
        print(u"+-----------------------+-----------------------------+")
        print(u"| \u001b[37;1m",lis[0]," "*(19-len(lis[0])),"\u001b[32;1m|   \u001b[37;1m",
                lis[1]," "*(23-len(lis[1])),"\u001b[32;1m|")
        print(u"+-----------------------+-----------------------------+\u001b[0m")
    except:
        print("                                ")

def customize():
    R="\u001b[31;1m"
    G="\u001b[32;1m"
    Y="\u001b[33;1m"
    N="\u001b[0m"
    S="\u001b[36;1m"
    List={}
    count=1
    prefix=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Prefix\u001b[0m): \u001b[0m')
    suffix=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Suffix\u001b[0m): \u001b[0m')
    while True:
        FileI=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Inputfile\u001b[0m): \u001b[0m').strip()
        if FileI == "":
            break
        try:
            fi=open(FileI,"r")
            break
        except:
            print("{Ga}[{Rr}!{Ga}] {Rr}{}{Ga}: No such a file.{Nr}".format(FileI,Rr=R,Ga=G,Nr=N))

    if FileI != "":
        info=input("{}Do you want to add some more info ? {}: ".format(Y,N)).strip()
    else:
        info='yes'
    if info in ('y','Y','yes','Yes','YES'):
        print(u"\u001b[32;1m   ---  Additional Word  --- \u001b[0m")
        print(u"\u001b[32;1m[\u001b[31;1m*\u001b[32;1m] After added, '\u001b[33;1m:q\u001b[32;1m' to come back\n")
        while True:
            word=input("{Rr}{:>2}{Nr}.{Rr} Additional Word{Nr}: ".format(str(count),Rr=R,Nr=N)).strip()
            if word != ":q":
                List[count]=word
                count+=1
            else:
                print("   \t{}----{}".format(G,N))
                break
    op=input(u'\u001b[32;4;1mThirukka\u001b[0m(\u001b[31;1m4/Outputfilename:wordlist.txt\u001b[0m): \u001b[36;1m').strip()
    if op == "":
        op="wordlist.txt"
    fo=open(op,"a")
    if FileI != "":
        for i in fi.readlines():
            try:
                i=i.replace("\n","")
            except:
                pass
            if i != "":
                fo.write(prefix+i+suffix+"\n")
        fi.close()
    for i in List:
        if List[i] not in ("","\n"):
            fo.write(prefix+str(List[i])+suffix+"\n")
    fo.close()
    print("{}[{}*{}] Process done".format(G,R,G))
    print("{}Filename{}: {}".format(R,N,op))

def Online():
    def Search(val=''):
        SS = '\u001b[45m'
        NN = '\u001b[0m'
        RR = '\u001b[31;1m'
        GG = '\u001b[32;1m'
        PP = '\u001b[36;1m'
        count = 1
        tmp_list=[]
        tmp_dict={}
        for i in search_modules:
            tmp_list.append(i[1:])
        for i in tmp_list:
            x = search(r'(.*?)'+val+'(.*).*', i.lower(), ASCII)
            try:
                tmp_dict[count]=x.group(1)+val+x.group(2)
                tmp_dict[count]=i
                if count == 1:
                    line="-"*len(val)
                    print(f"{PP} S.no   Result for '{val}'\n ----   ------ ---  {line}")
                print(f"{RR}{count:^5}{NN}  {x.group(1)}{SS}{val}{NN}{x.group(2)}")
                count += 1
            except:
                pass
        if count == 1:
            print(f"{GG}[{RR}!{GG}] No result found for {PP}'{val}'{NN}")
        else:
            print()
        return tmp_dict

    def Download(query, auther):
        print("\u001b[10D\u001b[1A\u001b[33;1mDownloading...            \u001b[0m")
        req= get(query)
        for i in range(1, len(query)):
            if query[-i] == "/":
                name=query[-i+1:]
                break
        f= open(name, 'a')
        f.write(req.text)
        f.close()
        req.close()
        print("\u001b[100D\u001b[1A\u001b[33;1mDownloaded \u001b[0m"+name+auther+"\u001b[32;1m\u001b[0m            ")



    def main():
        NN = '\u001b[0m'
        UU = '\u001b[4m'
        RR = '\u001b[31;1m'
        GG = '\u001b[32;1m'
        SS = '\u001b[36;1m'
        Min = '-'*64
        print(f"Usage:\n\t{GG}/{NN}<searchquery>\n\t{GG}:{NN}<s.no to download>\n")
        while True:
            _inp_ = input(f"{GG}{UU}Thirukka{NN}({RR}3/Online{NN})> ").strip()
            if _inp_ != (''): 
                if _inp_[0]=='/':
                    Dict=Search(_inp_[1:].lower())
                elif _inp_[0]==":":
                    try:
                        repo ="https://github.com/danielmiessler/SecLists/raw/master"
                        real_author =f"{RR}@{SS}danielmiessler{NN}"
                        Thread(target=Download, args=(repo+Dict[int(_inp_[1:])], real_author,)).start()
                    except:
                        print(f"{GG}[{RR}!{GG}] S.no '{_inp_[1:]}' not listed")
                elif _inp_ == 'back':
                    break
                elif _inp_ == "ls":
                    print(f"{GG}{Min}{NN}")
                    system("ls -Alh --color")
                    print(f"{GG}{Min}{NN}")
                elif _inp_ == "du":
                    print(f"{GG}{Min}{NN}")
                    system("du -sh *")
                    print(f"{GG}{Min}{NN}")
                elif _inp_ == "pwd":
                    system("pwd")
                elif _inp_ in ("quit", "exit"):
                    if active_count() != 1:
                        if input("background job is running if you want to quit [y/n]: ") =="y":
                            exit()
                    else:
                        exit()
                elif _inp_ == "clear":
                    system("clear")
                elif _inp_ == ("?","help","h"):
                    Help_banner()
                else:
                    print(f"{GG}[{RR}!{GG}] Ooops! '{_inp_}' not found. try '?'")
    main()

opt()
